import { Signer } from "ethers";
import { Provider, TransactionRequest } from "@ethersproject/providers";
import { Contract, ContractFactory, Overrides } from "@ethersproject/contracts";

import { ReentrancyMock } from "./ReentrancyMockContractInterface";

export class ReentrancyMockInstanceCreator extends ContractFactory {
  constructor(signer?: Signer) {
    super(_abi, _bytecode, signer);
  }

  deploy(overrides?: Overrides): Promise<ReentrancyMock> {
    return super.deploy(overrides || {}) as Promise<ReentrancyMock>;
  }
  getDeployTransaction(overrides?: Overrides): TransactionRequest {
    return super.getDeployTransaction(overrides || {});
  }
  attach(address: string): ReentrancyMock {
    return super.attach(address) as ReentrancyMock;
  }
  connect(signer: Signer): ReentrancyMockInstanceCreator {
    return super.connect(signer) as ReentrancyMockInstanceCreator;
  }
  static connect(
    address: string,
    signerOrProvider: Signer | Provider
  ): ReentrancyMock {
    return new Contract(address, _abi, signerOrProvider) as ReentrancyMock;
  }
}

const _abi = [
  {
    inputs: [],
    stateMutability: "nonpayable",
    type: "constructor",
  },
  {
    inputs: [],
    name: "callback",
    outputs: [],
    stateMutability: "nonpayable",
    type: "function",
  },
  {
    inputs: [
      {
        internalType: "contract ReentrancyAttack",
        name: "attacker",
        type: "address",
      },
    ],
    name: "countAndCall",
    outputs: [],
    stateMutability: "nonpayable",
    type: "function",
  },
  {
    inputs: [
      {
        internalType: "contract ReentrancyAttack",
        name: "attacker",
        type: "address",
      },
    ],
    name: "countAndSend",
    outputs: [],
    stateMutability: "nonpayable",
    type: "function",
  },
  {
    inputs: [],
    name: "countLocalCall",
    outputs: [],
    stateMutability: "nonpayable",
    type: "function",
  },
  {
    inputs: [
      {
        internalType: "uint256",
        name: "n",
        type: "uint256",
      },
    ],
    name: "countLocalRecursive",
    outputs: [],
    stateMutability: "nonpayable",
    type: "function",
  },
  {
    inputs: [],
    name: "countThisCall",
    outputs: [],
    stateMutability: "nonpayable",
    type: "function",
  },
  {
    inputs: [
      {
        internalType: "uint256",
        name: "n",
        type: "uint256",
      },
    ],
    name: "countThisRecursive",
    outputs: [],
    stateMutability: "nonpayable",
    type: "function",
  },
  {
    inputs: [],
    name: "counter",
    outputs: [
      {
        internalType: "uint256",
        name: "",
        type: "uint256",
      },
    ],
    stateMutability: "view",
    type: "function",
  },
  {
    inputs: [],
    name: "getCount",
    outputs: [
      {
        internalType: "uint256",
        name: "",
        type: "uint256",
      },
    ],
    stateMutability: "view",
    type: "function",
  },
];

const _bytecode =
  "0x608060405234801561001057600080fd5b5060016000806101000a81548160ff021916908315150217905550600060018190555061092e806100426000396000f3fe608060405234801561001057600080fd5b50600436106100935760003560e01c806396ffa6901161006657806396ffa690146100f8578063a87d942c14610126578063ad77de4a14610144578063af8aaee414610188578063b672ad8b1461019257610093565b8063083b2732146100985780631352d005146100a257806361bc221a146100ac5780638c5344fa146100ca575b600080fd5b6100a06101d6565b005b6100aa6101f8565b005b6100b461021b565b6040518082815260200191505060405180910390f35b6100f6600480360360208110156100e057600080fd5b8101908080359060200190929190505050610221565b005b6101246004803603602081101561010e57600080fd5b810190808035906020019092919050505061040a565b005b61012e610443565b6040518082815260200191505060405180910390f35b6101866004803603602081101561015a57600080fd5b81019080803573ffffffffffffffffffffffffffffffffffffffff169060200190929190505050610455565b005b61019061055c565b005b6101d4600480360360208110156101a857600080fd5b81019080803573ffffffffffffffffffffffffffffffffffffffff169060200190929190505050610724565b005b6101de61082b565b6101e66108ae565b6101ee6108ca565b6101f66108dc565b565b61020061082b565b6102086108ae565b610210610443565b506102196108dc565b565b60015481565b61022961082b565b6102316108ae565b60008111156103ff576102426108ca565b60003073ffffffffffffffffffffffffffffffffffffffff1660018303604051602401808281526020019150506040516020818303038152906040527f8c5344fa000000000000000000000000000000000000000000000000000000007bffffffffffffffffffffffffffffffffffffffffffffffffffffffff19166020820180517bffffffffffffffffffffffffffffffffffffffffffffffffffffffff83818316178352505050506040518082805190602001908083835b6020831061031f57805182526020820191506020810190506020830392506102fc565b6001836020036101000a0380198251168184511680821785525050505050509050019150506000604051808303816000865af19150503d8060008114610381576040519150601f19603f3d011682016040523d82523d6000602084013e610386565b606091505b50509050806103fd576040517f08c379a000000000000000000000000000000000000000000000000000000000815260040180806020018281038252601b8152602001807f5265656e7472616e63794d6f636b3a206661696c65642063616c6c000000000081525060200191505060405180910390fd5b505b6104076108dc565b50565b61041261082b565b61041a6108ae565b60008111156104385761042b6108ca565b6104376001820361040a565b5b6104406108dc565b50565b600061044d61082b565b600154905090565b61045d61082b565b6104656108ae565b61046d6108ca565b600060405180807f63616c6c6261636b282900000000000000000000000000000000000000000000815250600a019050604051809103902090508173ffffffffffffffffffffffffffffffffffffffff16630a2df1ed826040518263ffffffff1660e01b815260040180827bffffffffffffffffffffffffffffffffffffffffffffffffffffffff19167bffffffffffffffffffffffffffffffffffffffffffffffffffffffff19168152602001915050600060405180830381600087803b15801561053857600080fd5b505af115801561054c573d6000803e3d6000fd5b50505050506105596108dc565b50565b61056461082b565b61056c6108ae565b60003073ffffffffffffffffffffffffffffffffffffffff166040516024016040516020818303038152906040527fa87d942c000000000000000000000000000000000000000000000000000000007bffffffffffffffffffffffffffffffffffffffffffffffffffffffff19166020820180517bffffffffffffffffffffffffffffffffffffffffffffffffffffffff83818316178352505050506040518082805190602001908083835b6020831061063b5780518252602082019150602081019050602083039250610618565b6001836020036101000a0380198251168184511680821785525050505050509050019150506000604051808303816000865af19150503d806000811461069d576040519150601f19603f3d011682016040523d82523d6000602084013e6106a2565b606091505b5050905080610719576040517f08c379a000000000000000000000000000000000000000000000000000000000815260040180806020018281038252601b8152602001807f5265656e7472616e63794d6f636b3a206661696c65642063616c6c000000000081525060200191505060405180910390fd5b506107226108dc565b565b61072c61082b565b6107346108ae565b61073c6108ca565b600060405180807f676574436f756e74282900000000000000000000000000000000000000000000815250600a019050604051809103902090508173ffffffffffffffffffffffffffffffffffffffff16630a2df1ed826040518263ffffffff1660e01b815260040180827bffffffffffffffffffffffffffffffffffffffffffffffffffffffff19167bffffffffffffffffffffffffffffffffffffffffffffffffffffffff19168152602001915050600060405180830381600087803b15801561080757600080fd5b505af115801561081b573d6000803e3d6000fd5b50505050506108286108dc565b50565b6000809054906101000a900460ff166108ac576040517f08c379a000000000000000000000000000000000000000000000000000000000815260040180806020018281038252601f8152602001807f5265656e7472616e637947756172643a207265656e7472616e742063616c6c0081525060200191505060405180910390fd5b565b60008060006101000a81548160ff021916908315150217905550565b60018060008282540192505081905550565b60016000806101000a81548160ff02191690831515021790555056fea2646970667358221220af3c808af7f4f157c566eb717d358ad5972a61fdafa969a3429a7c285105f3f064736f6c63430006020033";
