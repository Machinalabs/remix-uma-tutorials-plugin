import { Signer } from "ethers"
import { Provider, TransactionRequest } from "@ethersproject/providers"
import { Contract, ContractFactory, Overrides } from "@ethersproject/contracts"

import { ReentrancyChecker } from "./ReentrancyCheckerContractInterface"

export class ReentrancyCheckerInstanceCreator extends ContractFactory {
  constructor(signer?: Signer) {
    super(_abi, _bytecode, signer)
  }

  deploy(overrides?: Overrides): Promise<ReentrancyChecker> {
    return super.deploy(overrides || {}) as Promise<ReentrancyChecker>
  }
  getDeployTransaction(overrides?: Overrides): TransactionRequest {
    return super.getDeployTransaction(overrides || {})
  }
  attach(address: string): ReentrancyChecker {
    return super.attach(address) as ReentrancyChecker
  }
  connect(signer: Signer): ReentrancyCheckerInstanceCreator {
    return super.connect(signer) as ReentrancyCheckerInstanceCreator
  }
  static connect(address: string, signerOrProvider: Signer | Provider): ReentrancyChecker {
    return new Contract(address, _abi, signerOrProvider) as ReentrancyChecker
  }
}

const _abi = [
  {
    stateMutability: "nonpayable",
    type: "fallback",
  },
  {
    inputs: [
      {
        internalType: "bytes",
        name: "_txnData",
        type: "bytes",
      },
    ],
    name: "setTransactionData",
    outputs: [],
    stateMutability: "nonpayable",
    type: "function",
  },
  {
    inputs: [],
    name: "txnData",
    outputs: [
      {
        internalType: "bytes",
        name: "",
        type: "bytes",
      },
    ],
    stateMutability: "view",
    type: "function",
  },
]

const _bytecode =
  "0x608060405234801561001057600080fd5b50610498806100206000396000f3fe608060405234801561001057600080fd5b506004361061003a5760003560e01c8063537e2eb8146101ab5780635592da871461022e5761003b565b5b600160009054906101000a900460ff1615610055576101a9565b60018060006101000a81548160ff0219169083151502179055506000610116336000808054600181600116156101000203166002900480601f01602080910402602001604051908101604052809291908181526020018280546001816001161561010002031660029004801561010c5780601f106100e15761010080835404028352916020019161010c565b820191906000526020600020905b8154815290600101906020018083116100ef57829003601f168201915b50505050506102e9565b9050801561018c576040517f08c379a000000000000000000000000000000000000000000000000000000000815260040180806020018281038252601a8152602001807f52652d656e7472616e637920776173207375636365737366756c00000000000081525060200191505060405180910390fd5b506000600160006101000a81548160ff0219169083151502179055505b005b6101b3610305565b6040518080602001828103825283818151815260200191508051906020019080838360005b838110156101f35780820151818401526020810190506101d8565b50505050905090810190601f1680156102205780820380516001836020036101000a031916815260200191505b509250505060405180910390f35b6102e76004803603602081101561024457600080fd5b810190808035906020019064010000000081111561026157600080fd5b82018360208201111561027357600080fd5b8035906020019184600183028401116401000000008311171561029557600080fd5b91908080601f016020809104026020016040519081016040528093929190818152602001838380828437600081840152601f19601f8201169050808301925050505050505091929192905050506103a3565b005b60006020820182516000808284888a5af1925050509392505050565b60008054600181600116156101000203166002900480601f01602080910402602001604051908101604052809291908181526020018280546001816001161561010002031660029004801561039b5780601f106103705761010080835404028352916020019161039b565b820191906000526020600020905b81548152906001019060200180831161037e57829003601f168201915b505050505081565b80600090805190602001906103b99291906103bd565b5050565b828054600181600116156101000203166002900490600052602060002090601f016020900481019282601f106103fe57805160ff191683800117855561042c565b8280016001018555821561042c579182015b8281111561042b578251825591602001919060010190610410565b5b509050610439919061043d565b5090565b61045f91905b8082111561045b576000816000905550600101610443565b5090565b9056fea26469706673582212205d0acf670a62cf0fffe9a6ad469ac5f0f9ad42808217802413303917341828f464736f6c63430006020033"
